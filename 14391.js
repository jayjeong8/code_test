//종이 조각
//영선이는 숫자가 쓰여있는 직사각형 종이를 가지고 있다. 
//종이는 1*1크기의 정사각형 칸으로 나누어져 있고 숫자는 각 칸에 하나씩 쓰여있다. 
//직사각형을 겹치지 않는 조각으로 자르려고 한다. 각 조각은 세로나 가로 크기가 1인 직사각형이다. 
//길이가 N인 조각은 N자리수로 나타낼 수 있다. ex) 493, 23...
//종이를 가로세로로 적절히 잘라서 각 조각의 합을 최대로 하는 프로그램 작성하기

//첫째줄에 종이조각의 세로크기 N과 가로크기 M이 주어진다. (1~4의 크기)
//둘째줄부터 종이조각이 주어지고 각 칸에 쓰여있는 숫자는 0부터 9까지 중 하나이다. 

const [input, ...cases] = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\n');
const [N, M] = input.split(' ').map(Number);
const paper = cases.map(e => e.split('').map(Number));

let ans = 0;

//가로로 찢어서 이어지면 0, 세로로 찢어서 이어지면 1이라고 가정.
//N*M-1번 연산을 통해 모두 가로로 찢는 경우부터 모두 세로로 찢는 경우의 수 까지 살펴볼 수 있음
for (let i = 0, size = N * M; i < (1 << size); i++) {
    let sum = 0; //여기에 가로찢기 + 세로찢기를 더한다.

    //가로로 찢는 경우의 합을 구한다. 가로로 찢으려면 세로줄이 있어야 한줄씩 찢으므로 row < N.
    for (let row = 0; row < N; row++) {
        let cur = 0;

        for (let col = 0; col < M; col++) {
            //현재 확인하려는 위치를 now에 저장
            let now = row * M + col; //몇번째 열의 몇번째 행까지 왔는지 now로 구하고 아래 조건문에서 비트로 변환

            //현재 위치가 0이라면 가로로 찢긴 부분.
            //가로로 찢는 동안 한자리수 씩 더 커지므로 10을 곱해주고 1의 자리수에 현재값을 더해준다.
            if ((i & (1 << now)) == 0) {
                cur = cur * 10 + paper[row][col];
            } else {
                //그 외의 경우에는 가로로 연결이 끊긴 것이므로 현재까지의 값을 더해주고 0으로 초기화
                sum += cur;
                cur = 0;
            }
        }

        //세로로 찢는 경우를 만나지 못한 경우 마지막에 더해주어야 한다.
        sum += cur;
    }

    //세로로 찢는 경우의 합을 구한다.
    for (let col = 0; col < M; col++) {
        let cur = 0;

        for (let row = 0; row < N; row++) {
            //비트 위치 확인
            let now = row * M + col;
            
            //현재 위치가 0이 아니라면 세로로 찢긴 부분.
            if ((i & (1 << now)) != 0) {
                cur = cur * 10 + paper[row][col];
            } else {
                //그 외의 경우에는 세로로 연결이 끊긴 것이므로 현재까지의 값을 더해주고 0으로 초기화
                sum += cur;
                cur = 0;
            }
        }
        
        //가로로 찢는 경우를 만나지 못한 경우 마지막에 더해주어야 한다.
        sum += cur;
    }
    ans = Math.max(ans, sum);
}

console.log(ans);